# ============================================================================
# HappyRepair - Docker Compose Development Environment
# ============================================================================

version: '3.8'

services:
  # PostgreSQL Database with PostGIS extension
  postgres:
    image: postgis/postgis:15-3.3
    container_name: happyrepair_postgres
    environment:
      POSTGRES_DB: happyrepair_dev
      POSTGRES_USER: happyrepair
      POSTGRES_PASSWORD: dev_password_2024
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      # Persist data
      - postgres_data:/var/lib/postgresql/data
      # Auto-run schema on first startup
      - ./backend/src/database/schema:/docker-entrypoint-initdb.d:ro
      # Backup location
      - ./backups:/backups
    networks:
      - happyrepair_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U happyrepair -d happyrepair_dev"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: happyrepair_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - happyrepair_network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # pgAdmin for database management (optional, for development)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: happyrepair_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@happyrepair.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - happyrepair_network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - admin # Only start with: docker-compose --profile admin up
    restart: unless-stopped

  # Backend API (will be added later)
  # backend:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   container_name: happyrepair_backend
  #   environment:
  #     NODE_ENV: development
  #     DATABASE_URL: postgresql://happyrepair:dev_password_2024@postgres:5432/happyrepair_dev
  #     REDIS_URL: redis://redis:6379
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./backend:/app
  #     - /app/node_modules
  #   networks:
  #     - happyrepair_network
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  happyrepair_network:
    driver: bridge

# ============================================================================
# Usage Commands:
# ============================================================================
#
# Start database only:
#   docker-compose up postgres redis
#
# Start with pgAdmin:
#   docker-compose --profile admin up postgres redis pgadmin
#
# Stop all services:
#   docker-compose down
#
# Reset database (WARNING: deletes all data):
#   docker-compose down -v
#   docker-compose up postgres redis
#
# View logs:
#   docker-compose logs postgres
#   docker-compose logs redis
#
# Connect to database:
#   docker-compose exec postgres psql -U happyrepair -d happyrepair_dev
#
# Backup database:
#   docker-compose exec postgres pg_dump -U happyrepair happyrepair_dev > ./backups/backup_$(date +%Y%m%d_%H%M%S).sql
#
# ============================================================================